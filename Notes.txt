scheduele_logic.py : process_order function 

The provided code defines a function process_order that schedules an order by replicating core logic from a JavaScript codebase. This function takes a ScheduleRequest object as input and returns an optional ScheduleResponse object. The function follows a series of steps to determine the appropriate scheduling details for the order.

First, the function retrieves product keywords data using get_product_keywords_data() and attempts to match the product ID from the request description using the match_product_id function. If no matching product is found, it defaults the product ID to 0. It then retrieves product information using get_product_info_data() and fetches the product object corresponding to the found product ID. If the product object is not found, it creates a fallback product object with default values.

Next, the function determines the grain direction based on the orientation, width, height, and description from the request using the determine_grain_direction function. It then calculates the current time with an offset based on the current hub specified in the request. If the hub is "wa", it applies the WA_TIME_ADJUST offset; otherwise, it applies the TIME_ADJUST offset.

The function then checks if the current time is past the cutoff hour specified in the product object. If it is, it sets the start date to the next day and marks the cutoff status as "After Cutoff"; otherwise, it sets the start date to the current date and marks the cutoff status as "Before Cutoff". It calculates the finishing days required for the order using the calculate_finishing_days function and adds these to the base production days from the product object to get the total production days.

The function determines the actual hub state based on the delivery state and current hub, retrieves the closed dates for the state using get_closed_dates_for_state, and calculates the dispatch date by adding the total production days to the start date, excluding closed dates using the add_business_days function.

Finally, the function builds a debug log with the scheduling details and logs it. It then constructs and returns a ScheduleResponse object containing the product group, dispatch date, grain direction ID, hub transfer information, dispatch date log, grain direction string, and development logs. This response encapsulates all the scheduling information determined by the function.



## FUNCTION UNIT TESTING ## 

PRODUCT KEYWORD LOOKUP = COMLPETE
function name: match_product_id
tests/test_product_matcher.py


SETTING GRAIN DIRECTION FOR BC ONLY = COMLPETE
function name: test_determine_grain_direction_portrait
tests/test_set_grain.py


SETTING START DATES , END DATES , ADDING PRODUCTION DAYS  = COMLPETE
function name: add_business_days.py
tests/test_add_business_days.py
Sets start date to production days only, not closed days or weekends.
Then calcs the end date, skipping closed dates and weekends 


NEXT BEST HUB 
function name: find_next_best
tests/find_next_best.py


TESTING API = PARTIALLY TESTED 
tests/test_live_api.py



TODO 
hub transfers fixed - create test functions and test more thoroughly 
Make sure all of the finishing rules are in , first look it seems some are missing
re think and test cutoff times, continue to use current hub or use production hub 
Sort out the "enabel hub tranfers switch , right now it seems to be always on.
Likewise enable auto impose. 

Make sure this functinoality is up front 


Need to step back and review the entire sequencing of the process order function, 
right now post code based transfers are not right
also feel like some of process order needs reviewing to make sure we allocate to hub, then check closed dates etc and set schedule 



Start Date vs Adjusted Start Date
1. **Start Date**: The initial calculated date based on:
   - Current time
   - Cutoff hour check
   - If after cutoff, moves to next day
   - If before cutoff, uses current day

2. **Adjusted Start Date**: The actual production start date after:
   - Checking for weekends (Sat/Sun)
   - Checking for closed dates (holidays etc.)
   - Moving forward until a valid business day is found

Here's a detailed explanation from the code:


///////////////////////////////////////////////////////

Confirmed Working 

if the delivers to is SA or Tas set deliversTo to VIC, to treat as vic.
if the delivers to is ACT set deliversTo to NSW, to treat as nsw.
if the current hub is NQLD,and the delivers to is QLD,  set deliversTo to NQLD, treat as nqld.
Next is post code hub transfers - this overrides above - if post code is in the list - that will set hte deilvers to (preferred production hub)
if the deliveres to after that is WA add #WA to the order so if it can be produced in WA , and that product type has unique WA sechdule - it will skip national schedule and match WA schedule. 

BC Grain Direction

1. Initial Orientation Setting:
- If orientation from Preflight is "portrait":
  - Default grain = "Vertical" (grain_id = 3)
  - Long edge = height
  - Short edge = width
- If orientation is "landscape":
  - Default grain = "Horizontal" (grain_id = 2) 
  - Long edge = width
  - Short edge = height
- If EITHER:
  - The dimensions are business card size (long_edge ≤ 100 AND short_edge ≤ 65)
  - OR description contains "bc" 
  THEN:
  - Keep the initial orientation-based grain setting
- ELSE:
  - Set grain = "Either" (grain_id = 1)

SPECIAL OVERRIDE FOR QLD CARDS 
SEND DEL 2 QLD DIGITAL CARDS TO VIC, UNLESS THE CURRENT HUB IS NQLD , LEAVE NQLD IN NQLD
If productId is 6,7,8 or 9 && current hub is NOT NQLD, and current hub is QLD, Send to VIC. 





///////////////////////////////////////////////////////




curl -X GET -H "X-API-KEY: 0cddf104f06e58149e1858612bc6cb34" http://127.0.0.1:8000/debug-logs


curl -X POST \
     -H "Content-Type: application/json" \
     -H "X-API-KEY: 0cddf104f06e58149e1858612bc6cb34" \
     -d '{
           "misDeliversToPostcode": "3000",
           "misOrderQTY": 1000,
           "orientation": "portrait",
           "description": "Sample Order",
           "printType": 1,
           "kinds": 1,
           "preflightedWidth": 90.0,
           "preflightedHeight": 55.0,
           "misCurrentHub": "vic",
           "misCurrentHubID": 1,
           "misDeliversToState": "vic"
         }' \
     http://127.0.0.1:8000/schedule



     curl -X POST \
  -H "Content-Type: application/json" \
  -H "X-API-KEY: 0cddf104f06e58149e1858612bc6cb34" \
  -d '{
  "kinds": 1,
  "orderId": "",
  "printType": 1,
  "orderNotes": [],
  "description": "DL Gloss 150gsm 4 colour process 2 sides + split delivery",
  "misOrderQTY": 4700,
  "orientation": "landscape",
  "misCurrentHub": "QLD",
  "misCurrentHubID": "5",
  "preflightedWidth": 210,
  "preflightedHeight": 99,
  "misDeliversToState": "NSW",
  "misDeliversToPostcode": "2233",
  "additionalProductionDays": 0,
  "centerID": 1234
}' \
  https://opslogic.onrender.com/schedule


  Option Shift F to format JSON in VSCODE




  samlpe Order orderNotes
  [
  {
    "order_id": "2392546",
    "type": "Hub",
    "note_text": "ProductionManager: \r\nPreflight passed. Turnaround time required.\r\n",
    "user_id": "23711",
    "user_name": "CP Preflight08",
    "date_created": "2025-03-25T13:19:08.246Z",
    "last_updated": "2025-03-26T00:19:09.170Z"
  },
  {
    "order_id": "2392546",
    "type": "Hub",
    "note_text": "#PREPRESS - SIZE DIFFERENT - 210x297mm",
    "user_id": "23711",
    "user_name": "CP Preflight08",
    "date_created": "2025-03-24T19:13:04.441Z",
    "last_updated": "2025-03-25T06:13:32.798Z"
  },
  {
    "order_id": "2392546",
    "type": "Centre",
    "note_text": "#Dispatch please use custom labels and ensure boxes weight less than 16kg.\nStock required by 12pm Mon 24/03 (warehouse hours are 7:30am-3pm Mon-Fri).\n",
    "user_id": "12853",
    "user_name": "Chris Liew",
    "date_created": "2025-03-24T18:08:20.385Z",
    "last_updated": "2025-03-25T05:37:11.649Z"
  }
]

printType 			
1. Offset. 2. Digital, 3. Offset + Digital. 4. Wideformat



Example of how Overrides Work.

Example 1: Run Moved Later (Mon -> Wed)
Product: Runs Mondays, 12:00 Cutoff.
Override: For this week, Monday run moved to Wednesday.
Order In: Monday @ 10:00 AM
Natural Run: Monday
Override Found: Mon -> Wed
Effective Run: Wednesday
Cutoff Check: Mon 10:00 is before Wed -> OK for Wed run.
Calculated Start Date: Wednesday
Result: Order joins the Wednesday run.
Order In: Tuesday @ 10:00 AM
Natural Run: Monday (of this week)
Override Found: Mon -> Wed
Effective Run: Wednesday
Cutoff Check: Tue 10:00 is before Wed -> OK for Wed run.
Calculated Start Date: Wednesday
Result: Order joins the Wednesday run.
Order In: Wednesday @ 10:00 AM
Natural Run: Monday (of this week)
Override Found: Mon -> Wed
Effective Run: Wednesday
Cutoff Check: Wed 10:00 is before cutoff on the effective run date -> OK for Wed run.
Calculated Start Date: Wednesday
Result: Order joins the Wednesday run.
Order In: Wednesday @ 2:00 PM (After Cutoff)
Natural Run: Monday (of this week)
Override Found: Mon -> Wed
Effective Run: Wednesday
Cutoff Check: Wed 14:00 is after cutoff on the effective run date -> Missed the run.
Calculated Start Date: Next natural Monday.
Result: Order scheduled for the following Monday.

Example 2: Run Moved Earlier (Wed -> Mon)
Product: Runs Wednesdays, 12:00 Cutoff.
Override: For this week, Wednesday run moved to Monday.
Order In: Monday @ 10:00 AM
Natural Run: Wednesday
Override Found: Wed -> Mon
Effective Run: Monday
Cutoff Check: Mon 10:00 is before cutoff on the effective run date -> OK for Mon run.
Calculated Start Date: Monday
Result: Order joins the Monday run.
Order In: Monday @ 2:00 PM (After Cutoff)
Natural Run: Wednesday
Override Found: Wed -> Mon
Effective Run: Monday
Cutoff Check: Mon 14:00 is after cutoff on the effective run date -> Missed the run.
Calculated Start Date: Next natural Wednesday.
Result: Order scheduled for the following Wednesday.
Order In: Tuesday @ 10:00 AM
Natural Run: Wednesday
Override Found: Wed -> Mon
Effective Run: Monday
Cutoff Check: Tuesday 10:00 is after the effective run date -> Missed the run.
Calculated Start Date: Next natural Wednesday.
Result: Order scheduled for the following Wednesday.


If you set an print run override to a closed date , it will shift fwd to the first open date





Plan for implementing Roles

<chatName="UserManagementRBAC"/>
Okay, let's break down the implementation plan for adding user management, roles, and permissions to the OpsLogic application.

**Core Requirements:**

1.  **Authentication:** Users need to log in.
2.  **Roles:** Define "Admin" and "Operator" roles.
3.  **Permissions:** Control access based on roles (Admin: Full Control, Operator: View Only).
4.  **User Management:** Admins need a UI to create, edit (roles), and delete users.
5.  **Permission Management:** Admins need a way to define what roles can access which pages/features (View vs. Edit).
6.  **UI Adaptation:** Existing pages need to adapt to the user's permissions (hide/disable edit controls for Operators).
7.  **View-Only Log Page:** A dedicated page showing only the debug logs from the API Test page.

**Architectural Decisions:**

1.  **View vs. Edit Pages:** Instead of duplicating templates (e.g., `products_view.html`, `products_edit.html`), we will use **dynamic templates**. A single template will be used for each feature page (e.g., `products.html`). The backend route serving the template will determine if the current user has 'edit' permissions for that feature. A boolean flag (e.g., `can_edit`) will be passed to the Jinja template. Inside the template, `{% if can_edit %}` blocks will conditionally render edit buttons, forms, and enable/disable input fields. This significantly reduces duplication and maintenance effort.
2.  **Permission Model:** We'll implement Role-Based Access Control (RBAC).
    *   **Roles:** Admin, Operator.
    *   **Permissions:** Define granular permissions like `products:view`, `products:edit`, `users:manage`, `logs:view`.
    *   **Mapping:** Roles will be mapped to a set of permissions.
3.  **Data Storage:** To maintain consistency with the project's current structure, we will use JSON files for storing user and role/permission data initially.
    *   `users.json`: Stores user details (username, hashed password, role).
    *   `roles_permissions.json`: Defines roles and the permissions associated with each.
    *   *Note:* For larger applications or more complex permission needs, a database would be more suitable, but JSON fits the current pattern.
4.  **Authentication:** Leverage the existing Basic Auth mechanism but enhance it to fetch user roles from `users.json` and verify hashed passwords.
5.  **Authorization:** Implement FastAPI dependencies to check user roles/permissions before allowing access to routes.

**Implementation Plan:**

**Phase 1: Authentication & Basic Role Setup**

1.  **Data Structure (`users.json` - New File):**
    *   Location: `/data/users.json`
    *   Structure: A dictionary where keys are usernames.
        ```json
        {
          "admin": {
            "username": "admin",
            "hashed_password": "bcrypt_hashed_password_for_admin", // Use passlib to generate
            "role": "Admin"
          },
          "operator1": {
            "username": "operator1",
            "hashed_password": "bcrypt_hashed_password_for_operator1",
            "role": "Operator"
          }
        }
        ```
    *   *Action:* Create this file with at least one initial Admin user (hash the password securely).

2.  **Password Hashing (`auth.py` & `data_manager.py`):**
    *   File: `app/auth.py`, `app/data_manager.py`
    *   Add `passlib` to `requirements.txt`.
    *   In `auth.py`:
        *   Import `CryptContext` from `passlib.context`.
        *   Instantiate `pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")`.
        *   Modify `get_current_user`:
            *   Remove dependency on `USER_CREDENTIALS` from `config.py`.
            *   Load user data from `users.json` using a new function in `data_manager.py`.
            *   Use `pwd_context.verify(credentials.password, user_data["hashed_password"])` for password verification.
            *   Return the user's role along with the username: `{"username": credentials.username, "role": user_data["role"]}`.
            *   Handle cases where the user is not found.
    *   In `data_manager.py`:
        *   Add `load_users()` function to read `users.json`.
        *   Add `save_users()` function to write `users.json`.
        *   Add `hash_password(password: str) -> str` function using `pwd_context.hash()`.

3.  **Configuration (`config.py`):**
    *   Remove the `USER_CREDENTIALS` variable and its loading logic.

**Phase 2: Role-Based Access Control (RBAC)**

1.  **Data Structure (`roles_permissions.json` - New File):**
    *   Location: `/data/roles_permissions.json`
    *   Structure: Defines roles and their associated permissions.
        ```json
        {
          "Admin": [
            "users:manage", // Special permission for user management page
            "roles:manage", // Special permission for role management page (if implemented)
            "products:view", "products:edit",
            "product_keywords:view", "product_keywords:edit",
            "cmyk_hubs:view", "cmyk_hubs:edit",
            "schedule_overrides:view", "schedule_overrides:edit",
            "finishing_rules:view", "finishing_rules:edit",
            "hub_rules:view", "hub_rules:edit",
            "preflight_profiles:view", "preflight_profiles:edit",
            "preflight_rules:view", "preflight_rules:edit",
            "imposing_rules:view", "imposing_rules:edit",
            "production_groups:view", "production_groups:edit",
            "api_test:view", "api_test:use", // Separate view/use for API test page
            "logs:view" // Permission for the new log view page
          ],
          "Operator": [
            "products:view",
            "product_keywords:view",
            "cmyk_hubs:view",
            "schedule_overrides:view",
            "finishing_rules:view",
            "hub_rules:view",
            "preflight_profiles:view",
            "preflight_rules:view",
            "imposing_rules:view",
            "production_groups:view",
            "api_test:view", // Can view the API test page structure
            "logs:view"      // Can view the dedicated log page
            // Operators cannot use the API test or edit anything
          ]
        }
        ```
    *   *Action:* Create this file defining the initial permissions for Admin and Operator.

2.  **Authorization Dependency (`auth.py` or new `permissions.py`):**
    *   Create a new dependency function, e.g., `require_permission(required_permission: str)`.
    *   Inside `require_permission`:
        *   `user = Depends(get_current_user)`: Get the authenticated user and their role.
        *   Load `roles_permissions.json` (use a cached function in `data_manager.py` for efficiency).
        *   Get the permissions for the user's role.
        *   Check if `required_permission` is in the role's permissions list.
        *   If not authorized, raise `HTTPException(status_code=403, detail="Not authorized")`.
        *   Return the user object if authorized (optional, can be useful).
    *   In `data_manager.py`: Add `load_roles_permissions()` function.

3.  **Route Protection (`main.py`):**
    *   Modify *all* existing routes (GET for pages, POST for saving/deleting).
    *   Add the `Depends(require_permission("permission_name"))` to the route definition.
    *   Example (Products Page):
        ```python
        @app.get("/products", response_class=HTMLResponse, tags=["UI"],
                 dependencies=[Depends(require_permission("products:view"))]) # View permission needed
        async def products_html(request: Request, user: dict = Depends(get_current_user)): # Also get user here
            # ... existing logic ...
            user_permissions = get_permissions_for_role(user['role']) # Helper to get permissions
            can_edit = "products:edit" in user_permissions
            return templates.TemplateResponse("products.html", {
                "request": request,
                # ... other context ...
                "can_edit": can_edit, # Pass flag to template
                "user_role": user['role'] # Pass role for nav bar
            })
        ```
    *   Example (Save Product):
        ```python
        @app.post("/products/edit/{product_id}",
                  dependencies=[Depends(require_permission("products:edit"))]) # Edit permission needed
        async def update_product(request: Request, product_id: str):
            # ... existing logic ...
        ```
    *   *Action:* Apply appropriate permission checks (`:view` for GET routes serving HTML, `:edit` for POST/DELETE routes modifying data) to *all* relevant routes in `main.py`. Update GET routes to fetch the user, determine `can_edit`, and pass it to the template.

**Phase 3: UI Adaptation & New Pages**

1.  **Dynamic Templates (All `.html` files in `app/templates/`):**
    *   Modify all templates that have editing capabilities (e.g., `products.html`, `cmyk_hubs.html`, `finishing_rules.html`, etc.).
    *   Wrap all edit controls (Add buttons, Edit buttons, Delete buttons, Save buttons within modals, form inputs within modals *if* they are for editing) in `{% if can_edit %}` ... `{% endif %}` blocks.
    *   For tables, ensure the "Actions" column header and the `<td>` containing edit/delete buttons are wrapped.
    *   For forms/modals used for *both* adding and editing, you might need finer control. The "Save" button might always be visible, but the backend route it posts to will handle the permission check. Input fields might need to be conditionally `disabled` or `readonly` if `not can_edit`.
        ```html
        <!-- Example: Edit button in a table row -->
        <td>
            {% if can_edit %}
            <button onclick="editProduct('{{ id }}')" class="edit-btn">Edit</button>
            <button onclick="deleteProduct('{{ id }}')" class="delete-btn">Delete</button>
            {% else %}
            <span>View Only</span> {# Or leave empty #}
            {% endif %}
        </td>

        <!-- Example: Add button -->
        {% if can_edit %}
        <button onclick="showAddForm()" class="add-btn">Add New Product</button>
        {% endif %}

        <!-- Example: Input field in modal -->
        <input type="text" id="productCategory" required {% if not can_edit %}readonly{% endif %}>
        ```
    *   *Action:* Systematically review and modify all templates with edit functionality.

2.  **Navigation Bar (`base.html`):**
    *   Modify the route serving `base.html` (likely the root `/` or specific page routes) to pass the `user_role`.
    *   In `base.html`, add conditional logic to show Admin-only links:
        ```html
        <nav>
            <a href="/">Home</a>
            <a href="/products">Product Schedule</a>
            <!-- ... other links ... -->
            <a href="/logs/view">View Logs</a> {# New link for log view page #}
            {% if user_role == 'Admin' %}
            <a href="/users/manage">User Management</a> {# Admin only #}
            <!-- <a href="/roles/manage">Role Management</a> {# Optional Admin only #} -->
            {% endif %}
            <a href="/api-test">API Test</a> {# Keep for Admin, maybe Operator view? #}
        </nav>
        ```
    *   *Action:* Update `base.html` and ensure `user_role` is passed from relevant routes.

3.  **User Management Page (`users_manage.html` - New File):**
    *   Location: `app/templates/users_manage.html`
    *   Content:
        *   A table listing existing users (username, role).
        *   Buttons next to each user: "Edit Role", "Delete", "Reset Password" (optional).
        *   A form/modal to add a new user (username, password, role selection dropdown).
        *   A form/modal to edit a user's role.
    *   JavaScript to handle showing modals, submitting forms via fetch to new backend endpoints.

4.  **Log View Page (`logs_view.html` - New File):**
    *   Location: `app/templates/logs_view.html`
    *   Content:
        *   Copy the "Debug Panel" section (HTML, CSS, JS) from `api_test.html`.
        *   Remove the Request Payload, Response Output, and Formatted Response sections.
        *   Ensure the JavaScript correctly fetches logs from `/debug-logs`.
        *   Include necessary base template extension (`{% extends "base.html" %}`).

5.  **New Routes (`main.py`):**
    *   `/users/manage` (GET):
        *   Permission: `users:manage`
        *   Logic: Load users from `users.json`. Render `users_manage.html`, passing the user list.
    *   `/users/save` (POST):
        *   Permission: `users:manage`
        *   Logic: Receive user data (username, password, role) from request body. Hash the password. Load `users.json`, add/update the user, save `users.json`. Return success/error JSON. Handle username conflicts.
    *   `/users/delete/{username}` (POST):
        *   Permission: `users:manage`
        *   Logic: Load `users.json`, remove the user by `username`, save `users.json`. Return success/error JSON. Prevent deleting the last admin?
    *   `/logs/view` (GET):
        *   Permission: `logs:view`
        *   Logic: Render `logs_view.html`. Pass `user_role` for the nav bar.

**Phase 4: Refinement & Testing**

1.  **API Test Page Access:** Decide if Operators should see the `/api-test` page structure (view-only) or if it should be Admin-only. Adjust the `api_test:view` permission in `roles_permissions.json` and the `require_permission` dependency on the `/api-test` route accordingly. If Operators can view, ensure the "Run API Test" button is hidden using `{% if can_edit %}` (map `can_edit` based on `api_test:use` permission).
2.  **Error Handling:** Ensure robust error handling (e.g., file not found, JSON decode errors, permission errors) in `data_manager.py` and `main.py`.
3.  **Security:**
    *   **Password Hashing:** Crucial. Never store plain text passwords.
    *   **Input Validation:** Sanitize and validate all input from forms/API requests.
    *   **Authorization Checks:** Double-check that *all* routes modifying data have the correct `:edit` permission check.

This plan provides a phased approach. Start with authentication and basic roles, then implement RBAC and permission checks, followed by UI adaptations and new management pages. Remember to handle password hashing securely from the beginning.