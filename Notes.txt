scheduele_logic.py : process_order function 

The provided code defines a function process_order that schedules an order by replicating core logic from a JavaScript codebase. This function takes a ScheduleRequest object as input and returns an optional ScheduleResponse object. The function follows a series of steps to determine the appropriate scheduling details for the order.

First, the function retrieves product keywords data using get_product_keywords_data() and attempts to match the product ID from the request description using the match_product_id function. If no matching product is found, it defaults the product ID to 0. It then retrieves product information using get_product_info_data() and fetches the product object corresponding to the found product ID. If the product object is not found, it creates a fallback product object with default values.

Next, the function determines the grain direction based on the orientation, width, height, and description from the request using the determine_grain_direction function. It then calculates the current time with an offset based on the current hub specified in the request. If the hub is "wa", it applies the WA_TIME_ADJUST offset; otherwise, it applies the TIME_ADJUST offset.

The function then checks if the current time is past the cutoff hour specified in the product object. If it is, it sets the start date to the next day and marks the cutoff status as "After Cutoff"; otherwise, it sets the start date to the current date and marks the cutoff status as "Before Cutoff". It calculates the finishing days required for the order using the calculate_finishing_days function and adds these to the base production days from the product object to get the total production days.

The function determines the actual hub state based on the delivery state and current hub, retrieves the closed dates for the state using get_closed_dates_for_state, and calculates the dispatch date by adding the total production days to the start date, excluding closed dates using the add_business_days function.

Finally, the function builds a debug log with the scheduling details and logs it. It then constructs and returns a ScheduleResponse object containing the product group, dispatch date, grain direction ID, hub transfer information, dispatch date log, grain direction string, and development logs. This response encapsulates all the scheduling information determined by the function.



## FUNCTION UNIT TESTING ## 

PRODUCT KEYWORD LOOKUP = COMLPETE
function name: match_product_id
tests/test_product_matcher.py


SETTING GRAIN DIRECTION FOR BC ONLY = COMLPETE
function name: test_determine_grain_direction_portrait
tests/test_set_grain.py


SETTING START DATES , END DATES , ADDING PRODUCTION DAYS  = COMLPETE
function name: add_business_days.py
tests/test_add_business_days.py
Sets start date to production days only, not closed days or weekends.
Then calcs the end date, skipping closed dates and weekends 


NEXT BEST HUB 
function name: find_next_best
tests/find_next_best.py


TESTING API = PARTIALLY TESTED 
tests/test_live_api.py



TODO 
hub transfers fixed - create test functions and test more thoroughly 
Make sure all of the finishing rules are in , first look it seems some are missing
re think and test cutoff times, continue to use current hub or use production hub 
Sort out the "enabel hub tranfers switch , right now it seems to be always on.
Likewise enable auto impose. 

Make sure this functinoality is up front 


Need to step back and review the entire sequencing of the process order function, 
right now post code based transfers are not right
also feel like some of process order needs reviewing to make sure we allocate to hub, then check closed dates etc and set schedule 



Start Date vs Adjusted Start Date
1. **Start Date**: The initial calculated date based on:
   - Current time
   - Cutoff hour check
   - If after cutoff, moves to next day
   - If before cutoff, uses current day

2. **Adjusted Start Date**: The actual production start date after:
   - Checking for weekends (Sat/Sun)
   - Checking for closed dates (holidays etc.)
   - Moving forward until a valid business day is found

Here's a detailed explanation from the code:


///////////////////////////////////////////////////////

Confirmed Working 

if the delivers to is SA or Tas set deliversTo to VIC, to treat as vic.
if the delivers to is ACT set deliversTo to NSW, to treat as nsw.
if the current hub is NQLD,and the delivers to is QLD,  set deliversTo to NQLD, treat as nqld.
Next is post code hub transfers - this overrides above - if post code is in the list - that will set hte deilvers to (preferred production hub)
if the deliveres to after that is WA add #WA to the order so if it can be produced in WA , and that product type has unique WA sechdule - it will skip national schedule and match WA schedule. 

BC Grain Direction

1. Initial Orientation Setting:
- If orientation from Preflight is "portrait":
  - Default grain = "Vertical" (grain_id = 3)
  - Long edge = height
  - Short edge = width
- If orientation is "landscape":
  - Default grain = "Horizontal" (grain_id = 2) 
  - Long edge = width
  - Short edge = height
- If EITHER:
  - The dimensions are business card size (long_edge ≤ 100 AND short_edge ≤ 65)
  - OR description contains "bc" 
  THEN:
  - Keep the initial orientation-based grain setting
- ELSE:
  - Set grain = "Either" (grain_id = 1)

SPECIAL OVERRIDE FOR QLD CARDS 
SEND DEL 2 QLD DIGITAL CARDS TO VIC, UNLESS THE CURRENT HUB IS NQLD , LEAVE NQLD IN NQLD
If productId is 6,7,8 or 9 && current hub is NOT NQLD, and current hub is QLD, Send to VIC. 





///////////////////////////////////////////////////////




curl -X GET -H "X-API-KEY: 0cddf104f06e58149e1858612bc6cb34" http://127.0.0.1:8000/debug-logs


curl -X POST \
     -H "Content-Type: application/json" \
     -H "X-API-KEY: 0cddf104f06e58149e1858612bc6cb34" \
     -d '{
           "misDeliversToPostcode": "3000",
           "misOrderQTY": 1000,
           "orientation": "portrait",
           "description": "Sample Order",
           "printType": 1,
           "kinds": 1,
           "preflightedWidth": 90.0,
           "preflightedHeight": 55.0,
           "misCurrentHub": "vic",
           "misCurrentHubID": 1,
           "misDeliversToState": "vic"
         }' \
     http://127.0.0.1:8000/schedule



     curl -X POST \
  -H "Content-Type: application/json" \
  -H "X-API-KEY: 0cddf104f06e58149e1858612bc6cb34" \
  -d '{
        "orderId": "12345",
        "misDeliversToPostcode": "3000",
        "misOrderQTY": 100,
        "orientation": "portrait",
        "description": "Premium uncoated postcard",
        "printType": 1,
        "kinds": 2,
        "preflightedWidth": 210.0,
        "preflightedHeight": 297.0,
        "misCurrentHub": "vic",
        "misCurrentHubID": 1,
        "misDeliversToState": "vic",
        "orderNotes": "Urgent order, please process quickly.",
        "additionalProductionDays": 1
      }' \
  https://opslogic.onrender.com/schedule


  Option Shift F to format JSON in VSCODE




  samlpe Order orderNotes
  [
  {
    "order_id": "2392546",
    "type": "Hub",
    "note_text": "ProductionManager: \r\nPreflight passed. Turnaround time required.\r\n",
    "user_id": "23711",
    "user_name": "CP Preflight08",
    "date_created": "2025-03-25T13:19:08.246Z",
    "last_updated": "2025-03-26T00:19:09.170Z"
  },
  {
    "order_id": "2392546",
    "type": "Hub",
    "note_text": "#PREPRESS - SIZE DIFFERENT - 210x297mm",
    "user_id": "23711",
    "user_name": "CP Preflight08",
    "date_created": "2025-03-24T19:13:04.441Z",
    "last_updated": "2025-03-25T06:13:32.798Z"
  },
  {
    "order_id": "2392546",
    "type": "Centre",
    "note_text": "#Dispatch please use custom labels and ensure boxes weight less than 16kg.\nStock required by 12pm Mon 24/03 (warehouse hours are 7:30am-3pm Mon-Fri).\n",
    "user_id": "12853",
    "user_name": "Chris Liew",
    "date_created": "2025-03-24T18:08:20.385Z",
    "last_updated": "2025-03-25T05:37:11.649Z"
  }
]

printType 			
1. Offset. 2. Digital, 3. Offset + Digital. 4. Wideformat

			